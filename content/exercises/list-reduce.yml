slug: reduce-function-lists
title: Reduce a list to a single value
tags:
    - lists
    - functional-programming
level: 3
prompt: |-
    Question:
    Write a function called reduce_lists that takes a function and a list as input and applies the function to the elements of the list in a cumulative way. The function should return a single value that represents the result of applying the function to the entire list.

    Example:
    Input: reduce_lists(lambda x, y: x + y, [1, 2, 3, 4])
    Output: 10
starter: |-
    def reduce_lists(func, lst):
        """
        Applies a function to the elements of a list in a cumulative way and returns the result.

        Args:
        func (function): The function to apply to the elements.
        lst (list): The input list.

        Returns:
        Any: The result of applying the function to the entire list.
        """
        # TODO: Implement the reduce_lists function
        pass
solution: |-
    def reduce_lists(func, lst):
        result = lst[0]
        for i in range(1, len(lst)):
            result = func(result, lst[i])
        return result
tests: |-
    def test_reduce_lists():
        assert reduce_lists(lambda x, y: x + y, [1, 2, 3, 4]) == 10
        assert reduce_lists(lambda x, y: x * y, [1, 2, 3, 4]) == 24
        assert reduce_lists(lambda x, y: x - y, [10, 5, 2]) == 3
        assert reduce_lists(lambda x, y: x + y, ["hello", " ", "world"]) == "hello world"
        assert reduce_lists(lambda x, y: x + y, ["apple", " ", "banana", " ", "cherry"]) == "apple banana cherry"

title: Function Call Logging
tags:
    - decorators
level: 3
prompt: |-
    Question:
    Write a decorator called `log_function_call` that can be applied to any function. The decorator should log the function calls with their arguments and return values.

    Example:
    Input:

    @log_function_call
    def my_function(x, y):
    return x + y


    Output:
    Calling my_function with arguments (2, 3)
    my_function returned 5
starter: |-
    def log_function_call(func):
        """
        Decorator to log the function calls with their arguments and return values.

        Args:
            func (function): The function to be decorated.

        Returns:
            function: The decorated function.
        """
        # TODO: Implement the log_function_call decorator
        pass
solution: |-
    def log_function_call(func):
        def wrapper(*args, **kwargs):
            print(f"Calling {func.__name__} with arguments {args} {kwargs}")
            result = func(*args, **kwargs)
            print(f"{func.__name__} returned {result}")
            return result
        return wrapper
tests: |-
    def test_log_function_call(capsys):
        @log_function_call
        def my_function(x, y):
            return x + y

        my_function(2, 3)
        captured = capsys.readouterr()
        assert "Calling my_function with arguments (2, 3)" in captured.out
        assert "my_function returned 5" in captured.out

        print("All test cases pass")

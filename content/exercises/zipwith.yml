slug: zipwith-function
title: Apply a function to corresponding elements of multiple sequences
tags:
    - higher-order functions
level: 2
prompt: |-
    Question:
    Write a function called zipwith that takes a function `f` and an arbitrary number of sequences as input. The function should return a list where each element is the result of applying `f` to the corresponding elements of the given sequences.

    Example:
    Input: zipwith(lambda x, y: x + y, [1, 2, 3], [10, 20, 30])
    Output: [11, 22, 33]
starter: |-
    def zipwith(f, *sequences):
        """
        Applies a function to the corresponding elements of the given sequences and returns a list of the results.

        Args:
        f: The function to apply.
        *sequences: The input sequences.

        Returns:
        list: The list of results.
        """
        # TODO: Implement the zipwith function
        pass
solution: |-
    def zipwith(f, *sequences):
        return [f(*args) for args in zip(*sequences)]
tests: |-
    def test_zipwith():
        assert zipwith(lambda x, y: x + y, [1, 2, 3], [10, 20, 30]) == [11, 22, 33]
        assert zipwith(lambda x, y: x * y, [1, 2, 3], [10, 20, 30]) == [10, 40, 90]
        assert zipwith(lambda x, y: x - y, [10, 20, 30], [1, 2, 3]) == [9, 18, 27]
        assert zipwith(lambda x, y: x + y, [], []) == []
        assert zipwith(lambda x, y: x * y, [1, 2, 3], [4, 5, 6]) == [4, 10, 18]
        print("All test cases pass")

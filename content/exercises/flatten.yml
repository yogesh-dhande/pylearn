slug: flatten-function
title: Flatten a tree
tags:
    - recursion
level: 1
prompt: |-
    Question:
    Write a function called flatten that takes a tree structure as input and returns a flattened list of all the elements in the tree. The tree structure is represented as nested lists, where each list can contain either numbers or nested lists.

    Example:
    Input: flatten([1, [2, [3, 4], 5], 6])
    Output: [1, 2, 3, 4, 5, 6]
starter: |-
    def flatten(tree):
        """
        Returns a flattened list of all the elements in the tree.

        Args:
        tree: The input tree structure.

        Returns:
        list: The flattened list of elements.
        """
        # TODO: Implement the flatten function
        pass
solution: |-
    def flatten(tree):
        result = []
        for element in tree:
            if isinstance(element, list):
                result.extend(flatten(element))
            else:
                result.append(element)
        return result
tests: |-
    def test_flatten():
        assert flatten([1, [2, [3, 4], 5], 6]) == [1, 2, 3, 4, 5, 6]
        assert flatten([10, [20, [30, 40], 50], 60]) == [10, 20, 30, 40, 50, 60]
        assert flatten([0, [0, [0, 0], 0], 0]) == [0, 0, 0, 0, 0, 0]
        assert flatten([1, [2, [3, [4, [5, [6, [7, [8, [9]]]]]]]]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        assert flatten([]) == []
        print("All test cases pass")
